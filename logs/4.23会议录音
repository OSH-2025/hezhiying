
说话人2 07:40
没关系，我说一下我们通信的事情，我给你写了一个叫做run8分的一个模块，我看着在com目录下那干的是什么事情呢？
说话人2 07:51
每个用户他的空间不是可以自己选，比如说我可以给每个用户，比如说给他64k我以后可以更大可以给他256k反正16兆，那就还可以跑64个进程，这不挺好的，这已经很强了，然后他这么跑，然后你想想看一件事情，每个用户有256个人这么充裕的空间了，你完全可以在用户空间里面分出一块来，专门拿来做串口的缓冲区，每个用户商有独立的自己的缓冲区了，那么我们做什么事情就是读写肯定还在系统的96k里面分出一块来做读入，但一旦读完之后，我们就会立刻跟根据这个消息头找到它放到哪一个用户的swot里面，然后把用户的内存去切换到进程，然后再放到文件中去刷进去，就把这个数据直接复制进去。
说话人1 08:43
然后用户读的时候每次读完就删掉，
说话人2 08:45
那个是一个环状缓冲区，就是有一个头指针一个尾指针，每一次加进一块之后，头指针就是一个队列来的，一定保证了它的数据是按顺序处理，就最老的一个最先处理，那就一开始投指针尾指针都在这，然后你现在突然间来了一段消息，所以他投指针到了是串口进来，数据的过程是使得头指针逐渐往前移，然后用户处理的时候肯定是先处理这块，所以处理完这块一直就往前移，然后就一块一块一直移到跟投资人重复的时候再读就会返回一个失败，告诉你说缓冲区里面有东西了，这样的话就保证说因为它是环状，所以那个投资人只要投他又会回来，你懂我意思吗？
说话人2 09:23
这不是很聪明，就是一个区域可以反复拿来用，这。
说话人1 09:26
不是数据结构讲的。
说话人2 09:29
环形队列，但是我这个环形队列有一个特点，它的每一个元素是变大小，可以变大小，头上是4个字节表示创客有多大，然后剩下那个部分是可以变长的，不像数据结构通常讲的是每个块是固定大小的，但是我们不是固定每块都可以变长，他用这样的方法就可以很简单的充分的利用起这方法上去了，你会发现一点他不需要像Mark那样动态的分配内存，因为mail的存在问题就是碎片化，如果你消息都很小，然后占的整个内存到处都是碎片，然后突然间来了一块很大，你看哪都放不进去，我们这个方案就保证它的内存始终是连续的，那么它一直在绕圈，最多最坏的情况发现用户太久没处理消息了，整个已经占满了，就从最老的开始丢弃。
说话人2 10:15
同时我还建议就是说每个包前面除了4个字节的大小之外，再加4个字节的序列号，就是每进来1个包就加1，这样就可以保，如果发生了丢包的话，用户程序通过一检测，这个ID就可以知道这个包丢掉了，就知道中间丢了多少个包，
说话人1 10:32
但是到时候是系统给每一个每个。
说话人2 10:36
用户有个计数器，每次往里面放一个所有不是共用的，因为一一个程序不知道别人收了多少个包，我只知道我自己那不用了，那问题是用户不知道他也没法用相减的方法，知道这个东西丢了多少。
说话人2 10:50
正常来说一个用户正常应该期待的是他读取的包应该是顺序是逐个加一的，但是我发现有不是加一，那就说明中间丢掉了，这样的话直接通过用户简单检查，就可以知道这个东西有没有丢。再往后还可以加什么？Crc校验各种各样的稀奇古怪的这种东西，单片机上的就不需要有我们单片机有硬件CS的，
说话人1 11:14
但是做这个东西有什么必要性吗？
说话人2 11:16
有，你串口说不定丢就是搞错了，一位也不好说了。
说话人2 11:21
你串口的我们像我们的串口是全高速串口，串口能做到26兆位一秒，
说话人1 11:28
20秒26兆，对。
说话人2 11:30
一秒钟可以发4兆字节的速度，26兆将近4兆字节里面的串口我都做了差分线，你看到我的数据线都是差分的，就是避免外部的干扰，全部的高速数据线都是差分，就避免了外部可能会存在，比如说外面有些你比如机器人里面经常的马达停停开开的那种，停开一次它可能都会有电磁干扰，你为了避免影响，腾讯其实都是做的都是差分数据线，避免了干扰的问题，然后 switch我正在画的板子先别急，
说话人1 12:05
然后还有通讯，现在只有这些吗？通讯够了还不够，现在我们相当于写的是用户空间的一篇。
说话人2 12:15
不是我们写的是地系统，不是我们写的是系统提供给用户的API，那不就是用户对用户API对。他做事情就很简单，
说话人1 12:26
后面通讯和信号还有什么。
说话人2 12:28
信号跟通讯两码事儿。通信是通讯是指就我那个信号。
说话人1 12:33
你说写到你那端，那是写好了吗？不是。
说话人2 12:36
我没写好，但我会给你提供一些函数，你直接按原样调用我的函数就行了，那个函数上是个空的，里面就只有，
说话人1 12:43
但我还是想问，比如说他等待某个信号变化，然后我之前说的是y为一，然后直接要的，要了之后就从业务的下面出来，现在是变成什么样了？
说话人2 12:54
现在是当你调用一个等待的东西的时候，他做的事情是什么？他做的事情是 a不对，对，不是，其实我们实现等待这个函数有两种实现方法，第一种就是你说的等待函数里面就是一个while一，然后while一里面每一次就是检查信号，如果信号是触发的状态，那么就直接返回，如果不是触发就要的。
说话人2 13:19
那么有一个的好处是它实现起来非常简单，不用更改任何的系统状态，同时也实现了在等待过程中别的进程也可以运行这件事，但它的缺点是什么？如果你的线进程优先级很低，它可能即使信号触发了，它也没被调，我一直没有等到要的一直没出来，一直在跑一个信息高度，但是我们有的时候我们可能需要一些保证了，当它信号一旦被触发的时候，进程我们立马就可以恢复，那么刚才说那种是最简单，你可以现在就这么写没问题也没问题，但如果你想要一个更好的控制，肯定是你的进程状态里面就会有一项叫做当前正在等待哪些信号，如果没有信号在被等待，那么这个状态值就是0，什么都没有，如果他在等待一项，比如你传了一个信号代码是123进去，那么系统当你另外一个程序去改变123代码的状态 Single的状态的时候，系统就会把当前所有的进程都扫一遍，检查一遍不我说错了，不是，是改成了触发状态之后，它会把123设置成一个触发状态，然后系统在一毫秒的中断里面就会扫一遍所有的进程列表，看看有没有哪个进程在等待，123如果有等待就立刻有些就立刻把执行权让渡给他，这样的好处是什么？
说话人2 14:32
这样好处是一旦信号改变，我能保证在接下来的至多，如果只有一个在等待，那就是至多一毫秒，甚至进程一定会被调度到，尽管它的优先级很低，它即使是最低优先级，它也会比较被调度到，这就保证了比如说一些突发事件的时候，这个所以我建议你就实现两个版本的位置，一个版本叫做位置，it就是real time位置实时的位置，另外一个就是普通的位置，我知道那是同一个VPN。不是，就是两个内部实现不一样，一个是我刚才跟你说的那种，另外一个就是while一等待信号那种。
说话人1 15:04
那就是为什么没有time的话，
说话人2 15:08
就是持续性更好的在用，就。
说话人1 15:10
相当于调用你那端。
说话人2 15:11
对 wait，简单的位置就是你自己写就行，因为里面只用要的，并没有额外其他的系统内部的东西用，就直接写进去，这个思路很好非常好。
说话人1 15:23
你应该找到等待信号的优先级最高的调度就应该立马不是，
说话人2 15:29
一旦信号被触发之后，那么我们就会忽略原来的优先级的顺序，如果有很多个在等待，当然起胸优先级最高的，但是如果没有的话，就是因为你一旦处于优先级最高的时候，他的等待状态就被清除掉了，那么下一毫秒过来的时候，他就会找到一个优先级更低。
说话人1 15:48
的去当一种。
说话人2 15:49
就保证优先级最高的在信号触发就至多一毫秒内它就能被调入，并且它能够运行至少一毫秒，有点绕这句话，但是应该能理解。
说话人2 16:01
还挺好的，你别说这个真的是很妙的一个思路，对你那个方法你那个方法其实现在操作系统确实是那么干的。
说话人2 16:11
好，你那个方法又正很好的平衡了，优先级这件事情，因为优先级低的进程本来被调度的概率，就你换句话说去检查信号的状态的概率，但你有个什么问题，如果一个信号被触发之后很快就结束了，而进程始终没有，对，它就跟无事发生一样，你懂吧？
说话人2 16:29
就错过了这个信号，而我这个方法能够保证在一个毫秒内可以一定会至少被触发一次，还有。
说话人1 16:34
这种问题，但是要是咱们没有想到的话，可能用户测试很久才。
说话人2 16:40
对，优先就会发现优先级低到一定程度上，甚至根本意识不到这个信号曾经被触发过，
说话人1 16:46
那是这样，还有。
说话人2 16:48
一种是什么？还有一种方法是什么？也是一毫秒内跟我那个做法是一样的，但是它检测到信号发生改变，不是他找到了一个进程，它并不直接调度这个进程，而是把这个进程等待状态清除掉，换句话说就让它变成能被调度的状态。
说话人2 17:10
这有个什么好处？这就更好的平衡，就相当于说介于我的和你的之间的一个策略，我的方法是一旦发生改变，立刻就调用那个东西，不管它优先级高低，而刚才我说那个方法是它一旦发生改变，它只是清楚它的等待状态，调度仍然不受影响，只是原来它是不能被调度的，因为它在等待你自然不能去调度它，现在变成了可以被调动了，至于什么时候被调动，取决于能调动引擎这种事儿。
说话人2 17:38
对这就比较接近你那个思路了，优先级的功能更强一点，优先级的地位更高，我这个几乎忽略了优先级比较real time的写法，你属于是优先级地位比较高的，那么一共可以实现三种不同的规则版本，一种这个一种是我的，但是不是直接调度，而只是把调度上等待状态清除掉，换句话说就是清除要等待状态之后要不要调度给他，如果调度给他就是实时的，如果不调度给他，那么就跟你比较类似，你的直接 Y像用户代码。
说话人1 18:13
那边等待到了，就相当于他直接这样怎么实现，什么叫什么意思？
说话人1 18:23
就是说你比如说用户调用了这个位置函数，然后为他 c功能，你虽然在系统端把这个东西的等待状态给改掉了，但是相对于用户来说就是走出这个位置。
说话人2 18:36
没有。你现在还在为你的内部，然后系统调度走了，进程就暂停一下这个位置，
说话人1 18:41
对，但是用户当再次调度到进程的时候，为什么函数应该走了？
说话人2 18:45
不是再次调度进程的时候，你要为什么会再次调度，前提是调度状等待状态已经被清除掉了，如果他等待状态还是一，那就始终不会调度等待状态被清除掉了。
说话人2 18:56
现在用户是不是用户的感觉，就是我从位的函数阻塞的状态出来。
说话人1 19:00
了，那不就跟我刚才说的一样，从我刚刚说的不就是用户感觉就是从位的函数的阻塞中走又走出来了，对。
说话人1 19:07
对，你这跟我刚说有什么区别。
说话人2 19:09
就没区别。不是，我还以为你的意思是位的函数第二种立刻就返回了，我以为你是这个。
说话人1 19:17
意思，就是。
说话人2 19:18
对是你的意思没错，那应该没问题，对，这个应该能实现实现能理解吧？
说话人2 19:24
我感觉其实还挺妙的思路。
说话人1 19:26
那三种委托我都写了，但是好像。
说话人2 19:30
有两种都是我这边事情，其实那两种是一样的，你再加个标志就好。 Wait之后要不要立刻调度加一个标志就好了，一个传参数传进去0就是不掉，那还。
说话人1 19:42
可以甚至实现同一个状态下，同虽然是不同进程也可以选择不同的位置方式。
说话人2 19:51
对你根据你的需要，因为我们是真正的real time系统，我们非常重视一个东西触发之后，到那个东西的处理函数开始运行的时间，我们非常重视这一点，甚至你还可以做在某个状态下，然后自动运行一个任务这种东西。
说话人2 20:08
当然这个以后再说了，当某个状态触发的时候自动创建一个任务，
说话人1 20:13
直接wait一个什么，然后直接对。
说话人2 20:15
但那是一种写法，还有的话直接在直接在新建任务的里面，那边有个flag在flag里传递一个参数，让他告诉他说等待某个信号，然后这个信号如果变成了一，那么你就就创建一个镜头这样子，这也是没问题，这个就选你自己喜欢，对这不都挺好的，这想法很好。
说话人1 20:38
还有什么他那些我应该写什么，我要写流程，你可以。
说话人2 20:46
写。
说话人1 20:47
外设输入输出的是吧？还有什么样的m。
说话人2 20:52
什么你忘了问题我在想，你忘了这是我的，就突然找到那些东西很简单的，没有什么代码的。还有一个是第八个，第八个可能是关键帧在写。对，几点了这都聊了几点时间了，还是可以再撤出，挺好的想法很好。对，其实调度是重头戏，调度真的是重头戏，你写代码记得别再给我写到安的衣服外面去了，如果你每次下来那。
说话人1 21:21
是他是不是那天是你说你要改一部分，然后我就先提交上去，我还没有开始检查代码，我甚至c杠也就写反了，我什么写反了？
说话人1 21:33
什么 Com点c跟com点因素不是。
说话人2 21:36
对你把全写法函数写到点，这里面。
说话人1 21:39
有没有检查函数专为可能就是那天晚上你说你要改个什么东西我就提急着交上去了，谁知。
说话人2 21:50
你。
说话人1 21:51
说。
说话人2 21:53
然后还有什么？还有我们的思维组的话，其实我现在想的它switch的话也是一个单片机外面挂，其实switch可以复用，我们现在这块板子设计的话，只是把它改成更多的窗口的结构，然后它不是外面也挂一片内存，比如把外挂内存拿来干什么，这里有个很有趣的用途就是一个外挂内存，正常来说它不是原来就是给那么多个进用户进程用的，我现在变成了外观内存是一个大的缓冲区，里面是一个巨型的库，一个巨型的环形缓冲区，
说话人1 22:25
懂我意思，但有什么用呢？
说话人2 22:28
那么多个端口同时都有可能发货数据来，我就拿一个卡图先给他装住，然后一当他一空闲，我们就立刻开始转发这些包，
说话人1 22:36
吃，但是这样太浪费了，怎么太浪费了？但是如果我们想移植到更低的，比如说f101或者说有些没有外设的话，可能就会什么叫没有外设，就没有加fsmc对吧？
说话人2 22:49
你内存才几十k也行，这只是个地址的区别罢了，你加挂挂fsmc只是你的缓冲区换了个地址，这没什么关系，你自己想你这样开销不会很大的，内存太小，你怎么样的switch都是内存开销很大的。
说话人2 23:04
 Switch这个东西天生就是很耗内存的，因为它同时还有那么多个传入的连接，你想想看对，它肯定是消耗很大，只不过我们消耗大我们就外挂内层这样1个很低成本的方式就解决这个问题，你还要开4位记录的时候是吗？顺序那个顺序是收到之后才被加吗？那是收到之后才被加上的，收到之前我们可以设计一个包头什么类似PPT方案，有一个什么ac k之类的，你懂我意思吗？
说话人2 23:35
有一个ac k然后你传过来我就发一个XL位置过去，
说话人1 23:39
懂我意思吧？懂，我们当时跟首测网络协议，当时跟吴成宇编的，我的树莓派跟他丹麦去通信，
说话人2 23:47
我还想搞思维去上面装个网口，那样只有。
说话人1 23:52
我们当时用gpl投的，
说话人2 23:54
我想在上面装一个w5500，可以实现网络，就插根网线上就是可以直接。
说话人1 24:00
跑的系统，但是咱们相当于没有写一个操作系统，咱们只是一个伪操作系统，
说话人2 24:05
但我们其实已经很接近真实操作系统，但是。
说话人1 24:08
我们相当于我们操作系统不会保存任何东西，因为不会保存就是保板子，一旦拔电就没有，
说话人2 24:14
就你想要数据吗？我可以外挂个iPhone不就可以保存，挂一个flash不就能保存，这。
说话人1 24:20
还是单位吗？这不是相当于走错一个MC。
说话人2 24:23
不是你单片机挂flash不是常规操作，
说话人1 24:26
相当于咱们120块钱做一个简单的操作系统出来。
说话人2 24:30
对，然后我是不是文件系统也一直上去搞点饭s上去就。
说话人1 24:35
有点超出我的本意了，
说话人2 24:37
没关系，你都就这个事情交给用户。当然我只知道在你心中，我为什么讲跟你讲个好玩的，你在其中一个节点上装一个这个东西，然后把它当成FTP服务器那样的东西来用懂吧？就是开一个守护进程一个进程就是监听数据，并且把这个数据写到SD卡里去，你不能做的跟什么似的，跟FBI服务器似的你懂吗？你比如说这真可以搞，我不是预留了16个io出来，你看那板子右边不是有一个空的插槽，那不是我今天上午讲多了，留给用户16个io你把那16个io接到1个SD卡上，行， Sd卡怎么SD卡就spi通信。
说话人2 25:17
对 SP还就是低速的，大概也有几个兆一秒够了，对，我就运行一个文件服务器在上面是吧？你传进来访问哪个目录我就给你打开，然后把数据发过来来给你，然后你可以写这不爽死了。
说话人1 25:33
但是这个朋友这是。
说话人2 25:35
我这怎么又写日志，
说话人1 25:38
没有实战价值，我觉得不是。
说话人2 25:39
这交给用户这都是用户态的事情你懂吗？你跟MTV服务器就写个it，
说话人1 25:44
服务器就相当于是。
说话人2 25:45
人家是单文件，FTP你是单函数，你就可以。
说话人1 25:49
直接后期卖配件，卖很好的配件，然后直接卖给别人卖给了我给我对可以我觉得可以生产各种各样的不同大小的公司，并不是没办法的话抗揍没办法打印控制台，对我可以插SD卡，把日志文件保存到这个里面去，当时我们认为当然我们说的大面积连接，然后但是说大一块对，所以看不可以插s卡是吗？
说话人1 26:13
我靠这不是文件服务器吗？
说话人2 26:16
也可以，你这样子你比如说我就知道这个上面的0，比如说假设说21号端口上运行的是FTP，然后你就可以直接connect，就发送一个数据包到21的端口，都会就这么出现了，
说话人1 26:30
对那也可以，我操你要卖给了我给我这些人，但是很。
说话人2 26:35
强有文件服务器吗？还有时钟自动授时，还有ntp又。
说话人1 26:41
可以我操。
说话人1 26:42
有一个单片机上有一个。
说话人2 26:45
单片机上装了一个 Rpc，就带小电池的实时时钟，这样它会变成APP服务器了，你只要发一个数据给他，就给你返回一个当前的时间，每个单位将可以进行各种各样的服务，为了考虑面积上来还是第一次，
说话人1 27:02
但是该行业务工作案件上我老实话说为什么不用更好的MCU更好，
说话人2 27:09
f103我们用的最大，我这还不够好，
说话人1 27:12
 MP我刚好MP。
说话人2 27:13
更好，男性你干嘛不好累累死我请问对，但MP5基本上都考虑累死了，拿一个小的链子裁剪一下这些东西就不好了，MCU主要的好处它的程序是写死的，但是你的工作场景就很固定了，没必要写那么多，而且我跟你说stm32是支持从内存中运行程序的，你甚至以后还可以加上那种动态加载的，从SD卡上直接读进一个二进制进来，然后就可以加载这个程序什么a内存。
说话人1 27:43
肯定我靠有想法的，我手机可以玩一玩，可玩性很高，对不对？
说话人2 27:51
是吗？节点我现在有总共还有9块大面积，
说话人1 27:55
9块钱对你拿回来了，我。
说话人2 27:58
不是囤了一堆货，先把这块你可以先拿着自己玩去。
说话人1 28:03
我有单片机，虽然不是这个型号，我也不知道什么型号，那不是，
说话人2 28:07
你就要f103基本都能用，你现在其实在f10上写点简单程序玩一玩，
说话人1 28:13
行，刚好说明它也可以串口连接方便，
说话人2 28:16
电脑就行了，插个USB找串口板子，你板上有没有？一般我们那个板没有。
说话人1 28:22
那不是还得用GPS，不是。
说话人2 28:24
我们板上有串口，但是不是USB的串口，我们的是JJ看的，用ST link接上去调试程序它都有单步调试了，可以跟GC GDP连在一起，
说话人1 28:37
 c站可以直接连上可以，为什么不可以的？
说话人1 28:41
他有他的GDP电脑上开个GDP就能连上去了，
说话人2 28:46
就说明实验基地有很多ST类的，就那种小的东西上面有一条排线可以插在那个板，那个板子不是左边有一个端口，底下有个端口，右边有个端口底下，那个端口就是差距太大了，
说话人1 28:56
直接给它插上，然后就可以用了，我记得有好几个箱子装的对，那么好多那个东西一大堆，你大厅排气往上一插就下次预约小一点。
说话人2 29:05
对那个东西比串口调试好多，人家在单调试器你甚至可以这样直接单独执行，强了可好用的那种，
说话人1 29:15
反正死定了，3万也不需要配什么环境，我们用的是GC，但是我说死定32上没有所谓环境，
说话人2 29:24
它不用环境，但是放上去就能跑，对调试器有环境，调试器是有对应的电脑端的程序，你就打开它就可以了。
说话人2 29:31
好这个其实很好的，因为我用过类似的，有我没用过，你要学会用 ST，那个是真的很好，我自己搜的还有两个那个东西。
说话人1 29:41
主要是我也不太懂硬件，代言乘坐软件，
说话人2 29:45
没事你可以学学可玩性不大，不是我刚才讲的MTV服务器这个事情真的太妙了，
说话人1 29:51
我觉得可以玩，但是还要再写一套什么优也可以，好像也不是很复杂。
说话人2 29:57
Ftp是个用户态的东西，我们写os我们把改了，
说话人1 30:01
当时催额到现在还不能写加上颜色卡驱动的，我们不能写一个端口，不是写一个硬件从映射，然后写完之后咱们直接提供好一篇，然后让用户直接。
说话人2 30:15
然后你可以让他实现你自己的协议，比如说我们就假设FTP FTP协议你直接搬一套现有的过来就好了。
说话人1 30:22
其实如果只有用户自己看的话，根本不需要很复杂的协议，只需要一些复杂的协议，我们又不是真实的网络环境，我们只要写一个很简单的。
说话人2 30:32
就行了，对，比如说命令可以是第一个字节表示命令代码，从0到ff，比如说00打开一个文件，后面传一个路径进去，然后01是读02是写这样子，
说话人1 30:45
然后模仿 right和read的系统调用，对，然后领个03是cos就行了。
说话人1 30:52
我们当时也是我跟吴清宇商量，我俩每次特别简单，
说话人2 31:00
把我跟你说case，原则就什么事情都是简单的，别一开始搞太复杂了，把太复杂就报了，真的千万别搞太复杂，你这个复杂度一上去，马上就打击自信心你就搞不定，所以我们现在这个代码一定要精简，我希望什么东西写完最好在2000行之内，
说话人1 31:19
今天上午还吹牛逼说5000~18,000，谁吹的我吹的通过大我们大概要写多少，我说5000~1万，然后底下一堆人，然后他没有说没有人说话，因为上一次他就问这个问题了，然后那些人也差不多回答都是这个数量级，但是。
说话人2 31:35
我敢保证他们写不出来，我也觉得。
说话人1 31:39
我觉得有一些组织像我们就完全是那种我一上午就能上，因为这几个神经网络我觉得他们做的都非常好。
说话人2 31:48
写东西不是os，其实基本就是讲白了不是os。
说话人1 31:53
怎么搞？
说话人2 31:54
 Os是啥？就是那种传统的东西，完了你就是自己写一个对你的课程也是有很大的帮助的，你至少知道一个os，你别说课本上写了什么，但你真的实际上去操作它的时候，你看有时候跟课本上讲的不一定是有时间，
说话人1 32:08
差不多我们啥老师都给他们做了。
说话人2 32:12
没关系，你要5000~1万行，我建议是什么？基础的系统要在2,000万不就行了。
说话人1 32:21
然后可以加一些额外的有趣的功能。
说话人2 32:24
kiss，因为我们之前有一门课用的演示用的os才1000行，更短那是农心的，不是类似的话一个东西，我再把它移植成农村，因为是个范围，对，现在我。
说话人1 32:36
的电脑是不是有理由有瑞斯克，
说话人2 32:37
瑞斯特人少一种另外一种处理器结构，
说话人1 32:41
我的电脑就86标准的叉86，也要查法律，对，相信这个是很好看，对，
说话人2 32:52
因为吃饭我既然他在1000行那个系统，它的内存管理比我们粗糙多了，它内存就是固定。
说话人1 32:58
的，但是但是跑的那么简单，上面好像也不需要什么内存。
说话人2 33:03
 Risk five，人家是真正的MP用的128兆内存那种。
说话人1 33:08
那是咱们的多少倍？不是我们的8倍不。
说话人2 33:12
知道。对，而且还是有真正MP，它是有内存管理的，有中断那些东西都是很完全的，我们这个不是我们这个就是把系统资源跟用户的程序隔离开，让用户能够正确的跑到上面，然后有一些实时的功能让用户快速的响应一些事件可以了。
说话人2 33:28
这对于写测试来说已经减少了很大的负担了，你想就像写程序一样，启动一个任务一样的东西，就是然后这个任务可以独立的运行，不用考虑任务和任务之间的干扰，因为我们系统自动解决这件事情，毕竟。
说话人1 33:40
他们也我们去年就是几个单片机，两个单片机，还有机械臂的单片机，但每次要发很多的通信，对，
说话人2 33:50
我们把通信这件事情简单了，比如说我知道这个单片机地址是00，那个是01，你就直接发01逗号端口号是多少，
说话人1 33:57
到时候比如说用户几六个单片机用GPS连接了，然后我们怎么知道，你比如说用户第一个单片机是我们先不编用户，有一个单片机就是机械臂有一个单片机是控制的，然后现在用户想调用这样的那程序是怎么知道该给哪个单片机分配哪个编号，单片机。
说话人2 34:25
编号是由switch来决定的。
说话人1 34:27
比如说用用户跑程序之前是不是不知道哪个单片机的。
说话人2 34:32
编号，程序，写程序的人不知道单片机被接到哪里去了，肯定是知道的，你c他从硬件映射出来，你c上有8个端口插到0号端口，就是0号单片机，我的ID就这么来的，就是0号单孔就是0号单片机，1号单片机一号台就这么简单。
说话人1 34:51
他们到了switch跟咱们用的switch不一定一样，
说话人2 34:55
s可能是配套的，肯定是我们的项目肯定是固定我们的思维去，要是想推广给更多人用，那就是思维去跟这两个东西都要配套的，他们两个是知道懂我意思吧？
说话人1 35:07
相当于是定制了，对整个环境之下定制的，对，
说话人2 35:12
你插到0号端口，那就是0号，单片机插到1号就是一号这样子。
说话人1 35:16
相当于是我们既卖了一个配件，又卖了一个说明书差不多了。
说话人2 35:21
然后你可以插比如说多达8个单片机，8个单片机之间互相都可以发信息，你只要知道对方端口号，你就直接一个数据包就丢过去了。这很好，这个的好最大的好处在于不用你再去写那些繁琐的串口的通信，就是还不知道自己写的对不对，我们帮你写好了，你只要。
说话人1 35:40
你只要关注就。
说话人2 35:42
不是你只要把你的我们开源就行了，你根据你的需求，你看PCB也可以开PCB跟代码都是开源的，你直接编译一下往里放就好了，你要多少个你自己做，而且我们可以我们这个系统可能还有一种衍生版本，就是没有多任务功能的，只有通信功能，有些单品它确实是专门用于这个任务的，就不给它通信，就是它没有多任务功能，它只有一个启启动就只有一个任务，这个系统表现就跟个库一样，它就没有之前我说的那么多那种什么多任务调度信号什么都没有，它就是一个单纯的运行层，只有一个通信和文件，你q它之后它就可以通信了这东西。
说话人2 36:22
因为你一旦涉及到多任务，它就一定要用fsmc挂一个很大的内存内存会占掉很多的io口，你避免这一点，那么你就不要用这个东西。是只有通讯才算几根引脚，其他引脚都可以拿来给你的io来用，你还可以用专门的io服务器，你懂我意思吗？我们可以有一个专门的io服务器，这个服务器没有多任务，它单纯的只是做把数据做进来之后，操作对应的io口，所以这样的话它就省出来很多io口可以拿来接一些外设了。
说话人1 36:56
时间上应该是什么？
说话人2 37:01
不会很慢，因为这个单片机没有多任务，它就是所有的操作都是实时的，最多一个毫秒的等待你一个毫秒都等不及，如果你一个毫秒都等不及的话，你程序直接做实施，对吧？
说话人2 37:15
Switch在高峰的时候，可能他的工作负担会比较大，所以switch我要考虑怎么设计，说不定可能会f区a做，SP间可能spa做的话也不好，那也不好，f区a便宜其实很便宜，也就几十块钱一瓶，
说话人1 37:29
但是他这已经是我这边 Lpga已经是我的噩梦了，
说话人2 37:36
男性大家PPT也好，它是全并行的，但它不能执行程序，没有程序那种概念，它就是傻逼的歪歪闹闹。
说话人2 37:44
但是我大f区也可以轻松的看到很多路的窗口输入，
说话人1 37:48
我好像听知道讲的。
说话人2 37:50
对吧？我可以每一路就不像单片机一样，它必须要在所有窗口间进行扫描，它不需要它可以直接同时读入，同时写出绝对是高速的首选，在我这个在。
说话人1 38:02
想。
说话人2 38:03
那也可以，我的想法是这样子的。
说话人2 38:07
 Apcbg。
说话人1 38:09
跟ipts是同一种什么PCB和mpg。
说话人2 38:13
 PCB电路板有什么关系？
说话人1 38:15
Mpg好像也是在板子上铭刻电路，不是吧什么东西你在说什么是吗？就是说生成比特的文件。对告诉这块板子应该做什么线路如何连接，对如何连接 Pcb不也是电路和连接吗？
说话人2 38:32
但是FTP里面其实查找表它内部其实并没有说怎么连接电路这个概念，它其实都是查找表，你回去查查lot罗卡推广就是查找表实现，它内部其实并没有说什么逻辑门怎么接，那个是cpld的模式，因为我只用过cpld我没用IP地址，我也起码检查cod这样子。
说话人2 38:52
我想的事情是这样子，如果你有APP的话，你可以APP里面举个例子，不是有88个端口吗？我们在里面做一个64个大小的缓冲区，就是8×8的 a发到b那么就在a逗号b这个格子是一个缓冲区，懂吧？这里面可以有一个数据包，它就轮行的把这个数据包最后。
说话人1 39:11
这个东西应该放到哪个呢？
说话人2 39:13
什么？
说话人1 39:15
就是8×8的查找表。
说话人2 39:16
是switch上的挂的大内存switch，
说话人1 39:20
挂一个大内存读写数据，比如。
说话人2 39:22
它有16兆，你16兆除以64 6÷64得到多少？16兆除以6就16384÷64是多少？总共16384得让我算16兆，不就是16384k吗？那不就256k对，那就相当于每一个环形缓冲区灯有256k这么大，读写速度怎么样？读写应该好快延迟很低的，因为它是直接挂到单片机内部高速的读写延迟其实很低。
说话人2 39:48
你这个的好处是什么你知道吗？好处是我只要发送给他，他就会在让环形卡通这个就已经放进去了，等会他一有时间就把它发出去，这样就可以实现所有的通讯都是独立的，你发给谁他就在存在于缓冲区，
说话人1 40:04
这个缓冲区应该是系统来分发，不是系统。
说话人2 40:07
分发，它是固定的，
说话人1 40:08
就是说系统主动把信息投给对应的单片机，
说话人2 40:13
就跟邮递员一样，邮局一样就发给他，暂存在这个列表里面，然后过一会他有时间他就把它转发到。
说话人1 40:19
是系统具体细节上应该是系统按照优先级发，还是说每个毫秒的中断中系统就出了一次所有的出现。
说话人2 40:29
单片机没有一毫秒钟的，单片机就是按优先级和先后顺序来处理的，然后你每一个信号每一个数据包发出去的时候，还可以带上它的优先级，这样优先级更高可以优先处理，反正我们是信任用户的，就是因为代码都是用户写的，所以我们都信任用户，所以我信任用户的优先级指定是可靠的，那么你可以给一个优先级，就int值越高的你就越优先处理。
说话人2 40:54
你当时那就丢到里面去，它系统里面要不然就是一个大化的缓冲区，要不然就是很多个小缓冲区，反正不管怎么样，系统总会在里面找到一个优先级最高的要把它处理干净。
说话人2 41:06
对。或者最简单现在如果你不想要对你就按时间顺序，最先到的我这边发走，先到先得。
说话人1 41:14
那系统是一次性处理完还是一次性处理，那么。
说话人2 41:18
它就是个y一循环，只要有他就处理，没有他就不管，没有他就空闲，因为他这个单switch，但是。
说话人1 41:24
每次还要等到系统一秒钟，
说话人2 41:26
没有东西思维情况下没有这个东西没有意思，思维只是只有一个现成的东西，
说话人1 41:31
相当于最后用户还需要。
说话人1 41:33
不是像比如说我跟某人讲，他们还需要在思维是单片机上找一个。
说话人2 41:39
刷一个程序上比较好，刷我们的switch的程序上，switch程序就是监听所有的端口，只要他有信息过来，我就把它放到网上确定，只要一有空闲，我就立刻从法院去读取数据，把它发给对应的。
说话人1 41:50
思维是吧？
说话人1 41:53
你还说这两个是吧？对，
说话人2 41:56
它有两种不同的单片机，一种是思维区，另外一种是你节点。
说话人1 42:00
我还以为是相当于不同的节点，不同的节点上，比如说有5个单片机，我只需要在其中1个单片机上烧写程序就可以了，
说话人2 42:13
其他的也要你每个单位要运行各自的程序，你机械臂的可能有机械臂的程序，你的可能有不同的程序。
说话人1 42:22
要说用户比如说操你这样说，我想我怎么说一下子，比如用户在单片机a上两有10 10 200个任务要操作，用户的单片机b上有300个任务操作，我本来的构想是只需要在一块单片机上烧写程序，然后烧写程序就会控制整个ab单片机，然后合适的处理，然后共同完成任务，是不是？
说话人1 42:52
现在原来你告诉我原来是a运行一块系统，b运行一块系统，然后我们之间唯一的联系只是通过康姆斯为主，对，
说话人2 43:00
结果非常的结果。昨晚你还好吗？没人理解。
说话人1 43:09
没有，好我懂了，
说话人2 43:13
这不就相当于是我想操作一个东西，以前我要发串口还是自己去定协议，现在我不用我只要往只管往里丢就行了，然后越需要紧迫处理的，我就给他越高的优先级，我就提前退休，你看太高劝退，还好就跟你正常言论程序一样，
说话人1 43:30
但是写咱们这好像也不需要，
说话人2 43:33
当然也需要对你真的是，但是他自己去搞通信的事情，我们不需要你自己搞了，而且同时运行多个任务，你也不需要做什么等待，考虑在一个任务里面怎么去安排这些处理的顺序，你只要就正常的写，因为while一循环都没问题，每个任务你就用最粗暴的方式写出来，我们系统会自动帮你处理好这几个任务间，调度这个事情，然后你在适当的地方，如果你是一个高级用户，你在适当的地方你就用要的把出控制权让渡出去，突然这么多，其实这个是很理想的方法，就是他完全没有对用户来说负担很小，根本就不需要，因为原来我们经常这种情况是什么？
说话人2 44:12
就一个是大循环里面要搞各种各样的任务，你还得担心哪个任务不会卡死了，你说。
说话人1 44:18
比如说两个单片机还是不同a200 b有300个进程，如果a的第一百九十九个进程想等b的第二百九十九个进程结束，a才运行，这个怎么做？
说话人2 44:30
通过通过通信。
说话人1 44:33
通信的时候会把信号给通信过来吗？
说话人2 44:35
通信是不会把信号通信过来，所以说我们以后要改的一个东西了，以后是怎么实现信号，怎么跨节点，就不是以后我们要实现怎么把信号跨节点，现在是没有这个功能的，现在信号就只能在节点内，这没关系，kiss原则先把东西做出来再说。
说话人2 44:52
行，就当你想到一个更复杂的东西，你把它写到图6里就好了，你先不用做了。Kiss原则就先把最基本的东西实现掉，剩下的其他的事情那就以后再说也没关系，我没啥问题，几点走可以吗？录音还开着吗？
