说话人1 00:00
原文：
比较详细的就是我定义了第一版所需要的一些API有什么，包括执行的新任务，终止的任务，获取当前的ID，通过ID的任务信息设置任务信息调度等待，
说话人2 00:14
原文：
能不能解释一下每个参数就是每个参数。
说话人1 00:17
原文：
写的吗？这很明白了， Indms多少毫秒吗？
说话人2 00:21
原文：
我这样看看，
说话人1 00:24
原文：
看错了，
说话人2 00:25
原文：
觉得很直白， MS到哪里访问控制，
说话人1 00:32
原文：
然后下面访问控制single，w就创c new就是创建一个信号，然后c close就是我的命名统一都是这样，前面几个字母表示哪一类的， API后面表示它的内容和new，就新建一个close就是关闭 set可以把它设置成1或者0，然后 wait seek no就是可以等待一个信号发生，等待一个信号变成一，如果它没变成一就一直等在这里，然后读取信号当前的状态，
说话人2 01:03
原文：
一直等待应该是个多线多线程的，
说话人1 01:06
原文：
一直等待就会被调度走，然后直到系统就并且置上一个信标志，告知系统说一会儿这信号变了怎么样。
说话人2 01:13
原文：
他现在输入的参数有个time。
说话人3 01:15
原文：
 out，对，
说话人2 01:17
原文：
然后这个函数是不断被调用，直到这个time它变成-1，
说话人1 01:20
原文：
不是是你调用它之后，如果它不是你调用它了之后，它就会等待一个信号被触发，一直等在这一句上，
说话人2 01:28
原文：
等这个太茂它变成-1，
说话人1 01:31
原文：
不是太茂的，是等太久的时候，他们开放等于-1一直等，对，如果他要是这么长时间还没有发生的话，就返回一个错误。
说话人2 01:42
原文：
那into， seek是等待的信号吗？
说话人1 01:46
原文：
这个是信号的可以返回那个值吗？这里不是有一个。
说话人2 01:54
原文：
吗？值信号。
说话人1 01:56
原文：
那个值吗？
说话人2 01:58
原文：
这个wits一个就是把整个线程给搁置。
说话人1 02:00
原文：
掉，对搁置直到那信号被触发。
说话人2 02:04
原文：
如果现在主线程在跑这个函数，其他函数应该是跑的，没有在运行。
说话人1 02:12
原文：
一个进程，就一个函数哪来的，其他。
说话人2 02:15
原文：
一这是进程中的函数。
说话人1 02:17
原文：
对，这些都是进程内部，我们没有实现进程到线程这一级，我们系统里只有一个单独的线程，
说话人4 02:24
原文：
每个中心就没有。
说话人1 02:26
原文：
进程，对，你没有必要搞进程了，你那么个小系统你还搞进程干嘛？真是的。
说话人1 02:30
原文：
然后环境可以得到当得读到当前的处理器。
说话人3 02:34
原文：
ID，
说话人1 02:36
原文：
然后系统的可以获得系统信息，可以获得系统的定时器的。
说话人1 02:41
原文：
然后流式通信就是我们的通信的协议，包括打开一个通信，关闭一个通信，发送一块东西，接收一块东西直接复制，接收的话会从缓冲区里把这个数据删掉， copy的话就不会删掉，然后is单纯只做删除的工作，然后为了判断当前的缓冲区里面有多少还没有被读取的那个东西，然后他们却可以确保连接正常。
说话人1 03:11
原文：
就这样第一版一篇很简单，就这么点二二三十个函数结束了没有了，但是实现这二三十个函数是很大的突破，你要知道这个事情。
说话人2 03:19
原文：
等一下我看一下，
说话人2 03:22
原文：
比如说第一个函数启动新的任务
说话人3 03:31
说话人3 04:04
原文：
行不行？
说话人3 04:05
原文：
然后我们来参加刚才你说喜欢你多少时间，
说话人5 04:09
原文：
scute执行新的，
说话人3 04:17
原文：
大家知道吗？
说话人2 04:19
原文：
我们还是委托进程为多线程，
说话人4 04:22
原文：
那肯定是，因为单片机不只能跑一个线程，
说话人5 04:26
原文：
或许当前的PSP。
说话人3 04:29
原文：
因为平时过来我们学习扑克，
说话人2 04:33
原文：
这都是啥东西，
说话人5 04:35
原文：
哪个px。
说话人2 04:37
原文：
说幸福，
说话人4 04:40
原文：
哪有哪。
说话人2 04:43
原文：
这是个结构造刻印，是个结构体吗？
说话人5 04:48
原文：
它不是一个数组吗？星不是。
说话人3 04:50
原文：
个数是什么？为。
说话人2 04:53
原文：
啥不能结构体指针也行，
说话人3 04:56
原文：
谁知。
说话人2 04:58
原文：
这个东西是啥？Pro可幸福进程函数进程的结构体吗？C语言不能面向对象，
说话人5 05:11
原文：
PRO可以明显吗？
说话人3 05:13
原文：
是吗。
说话人4 05:17
原文：
不是PRO任务信息，PRO不是这个程度，然后into PRO任务信息。就是PRO process Information。
说话人2 05:31
原文：
进程信息。
说话人4 05:32
原文：
 Process这方面写ok了，
说话人5 05:35
原文：
或者c。
说话人2 05:37
原文：
我们就需要进程结构体，
说话人3 05:40
原文：
运。
说话人2 05:42
原文：
特萨斯笨灯挂7轮1，这是什么？这个函数下面怎么还有两个子函数？
说话人3 05:49
原文：
谁知。
说话人2 05:50
原文：
设置PID对应的信息，但是光知道这个函数还不知道怎么写，比如说我该怎么写。
说话人5 05:59
原文：
怎么你随便怎么写实现就完了。
说话人2 06:03
原文：
比如说从用户区我们怎么定，什么叫再。
说话人3 06:07
原文：
继续说，
说话人2 06:10
原文：
什么你说什么叫什么，比如说 inter pizza，你能随便挑一个什么叫pizza？
说话人4 06:18
原文：
就是这个函数p赛特这函数，
说话人3 06:20
原文：
然后。
说话人2 06:22
原文：
你能给我们具体能给我主要是给我具体讲一下，就你随便挑一个函数给我讲讲该怎么写，我不是很明白，
说话人1 06:30
原文：
首先系统内部有一个系统内部有一个列表，
说话人4 06:36
原文：
有个列表list，
说话人1 06:38
原文：
对有一个列表，这个列表其实我们。
说话人2 06:41
原文：
怎么调用它能调用它吗？
说话人1 06:42
原文：
你不能直接调用它，
说话人3 06:46
原文：
不上了你和市场重点内容发展，包括技术的发展，
说话人5 06:51
原文：
你就到时候让他写个函数，然后。
说话人4 06:54
原文：
叫你要让他写个示例函数，然后来写，
说话人2 06:58
原文：
比如说他说设置ID对应的任务信息，从用户需要这个任务信息都包括哪些用户区是什么意思，我们该怎么从用户去调用它，或者说怎么修改它的值，它是这样子的。
说话人2 07:21
原文：
通过PAD得到任务信息，也就是说肯定有个地方来把所有任务信息和PAD存储起来，
说话人3 07:29
原文：
复制。
说话人2 07:36
原文：
到用户去了。
说话人5 07:38
原文：
你你传他说的。
说话人4 07:42
原文：
用户区是用户的64k的内存吗？
说话人5 07:46
原文：
你只用它传入了两个参数，然后其他参数我觉得不是有全局全局的参数，
说话人2 07:54
原文：
就是说我该调用哪些东西，然后怎么是全局。
说话人5 07:58
原文：
的参数，有什么对。
说话人2 08:01
原文：
你有哪些参数我可以调用，然后我是在某个地方需要改哪些参数，
说话人5 08:07
原文：
有个什么参数可以调用，那咱先定一下，有什么参数可以。
说话人1 08:13
原文：
你说。
说话人2 08:16
原文：
从哪来着？比如说你设置PID对应的任务信息，从用户区的是什么意思？
说话人1 08:25
原文：
就是系统内部有一个列表，
说话人2 08:29
原文：
这个列表我们不能调用它，
说话人1 08:31
原文：
不能调用它，是这样子的，系统内部有一个有一个列表，这个列表在每个单片机上都有一份相同的copy，不叫项目的copy，是每个单片机上都有运行的自己一块单片机上的任务的列表，别的单片机的是通过总线去获取的，但只能一次获取一项，然后你这个函数作用是什么？用户给你不是提供了一个plcrf的指针吗？就会把指针指定的结构体复制到系统内部的内容，它覆盖掉当前的内容生活，
说话人3 09:07
原文：
还是。
说话人1 09:08
原文：
为什么有一个警告的，它为什么是你看警告为什么它传回来是两重星号，直接提供一个指向内部的表的指针。
说话人2 09:17
原文：
 Process应付 PRO可以应付，
说话人1 09:21
原文：
他跟应付是一个结构体，
说话人2 09:23
原文：
对这个结构体包含哪些内容？
说话人4 09:27
原文：
对这个结构体你的你貌似没写API，
说话人5 09:32
原文：
然后用的是函数的APS。
说话人2 09:38
原文：
然后那个结构体我不应该获得吗？不然我怎么知道怎么。
说话人5 09:41
原文：
修改它，那结构体你得定义一下结构体里边有啥，对。
说话人3 09:47
原文：
谁知或者。
说话人5 09:53
原文：
你让他先实现一个函数，咱们知道结构体里有啥对，
说话人2 09:56
原文：
对吧？结构体肯定来展示给我们，
说话人5 09:59
原文：
或者他先写好，然后咱把结构体加一个，不知道可是什么意思，他想把那个结构体定义一下，
说话人4 10:05
原文：
咱们往第几个意思。
说话人5 10:06
原文：
第一个音吹不s第一个启动新的任务吗？汽中心。
说话人2 10:12
原文：
的任务stub、安全process，操谁也能用cost吗？我才知道。
说话人5 10:19
原文：
是谁知。
说话人2 10:22
原文：
我就是c加加我才知道，有我不会。
说话人4 10:25
原文：
写c加加幸好这只用。
说话人2 10:26
原文：
写计算机通用学，天天用c加加写。不过咱们说话得注意一点，录音是要被录下来，然后放到给他看我。
说话人1 10:36
原文：
删掉就好了，你这。
说话人4 10:37
原文：
点删掉不行，但。
说话人2 10:38
原文：
我还要读特别多来找着这一段，
说话人1 10:40
原文：
你看你说的不是说你说的越多越早了，
说话人3 10:44
原文：
这个。
说话人2 10:47
原文：
其实是用户的64k内存，
说话人1 10:50
原文：
不是吗？对是用户的64天。
说话人4 10:55
原文：
那系统的32k90 96k96k96 96k就是系统96k9 96k你不是32k用于系统，然后64k96k全是给全给系统上。
说话人4 11:06
原文：
上次不是说了。
说话人2 11:07
原文：
全给系统，然后外部有个。
说话人4 11:11
原文：
然后每次从外部直接捞进来。
说话人3 11:14
原文：
一个。
说话人1 11:15
原文：
系统内部的这些表，它的表象都是有固定的地址的，或者它就是全局符号，只不过用户不知道这些东西在哪，他也不需要知道，
说话人4 11:26
原文：
他只需要告诉系统，我要就可以。
说话人1 11:28
原文：
告诉系统我要什么系统会帮他从那个表里面复制出来联系用户一份，
说话人5 11:32
原文：
用户。
说话人1 11:33
原文：
也是复制进去的，就用户不能直接去修改，当然我们其实你看叹号这个函数其实给了一个直接修改的方法，
说话人4 11:40
原文：
因为返回的。
说话人1 11:42
原文：
信号你直接饮用，这就是一个信号，就是直接指向系统内部的表象的。
说话人3 11:48
原文：
那个东西就。
说话人1 11:50
原文：
我们不推荐用户使用，所以加了一个叹号，我们会到时候再用一个c语言里面有一个宏定义，把它做上一个标记，让用户轻易这样的，
原文：
现在疑问太多了，以至于我们不知道从哪开始问起。
说话人2 17:40
原文：
从头开始问，首先问英吹扑克，然后start。
说话人1 17:44
原文：
不认为就是函数指针，函数指针对你总得你要被运行的函数的指针，
说话人2 17:51
原文：
这个是被运行的函数的指针，也就是某用户其实是类似于拍摄的独者程或者谁有独者算了，你玩你们先聊。
说话人4 18:04
原文：
不是，他一次不是只能一个线程吗？是那一个线程不就一个函数。
说话人1 18:09
原文：
吗？是你不用多个函数间蹦达吗？
说话人2 18:12
原文：
用户每次调用的时候就是你用过c Python或者c的多线程吗？用过它就是它函数的参数是第一个参数是函数的指针，然后第二个参数就是这个函数的参数，对，然后第三个就是其他信息，比如说什么 PID优先级等等，其他的我。
说话人4 18:31
原文：
用过拍摄的结果。
说话人2 18:33
原文：
我接触独者程的时候，那次给原神写代码，就原神自动弹奏进化之前，
说话人4 18:39
原文：
我接受多线程是那次写CV的时候，然后要截图的时候用。
说话人2 18:45
原文：
那次我后来接触多线程是有科学社会研讨课，然后我做深度图像加密，
说话人4 18:53
原文：
不过我后来我发现跑，我当时我开了10个线程，我发现开10个线程还是太慢，然后我直接变成开10个进程，10个线程10个进程，因为线程它相当于它用了1个核，就这样我知道它1个进程只能占1个核，但是我开多个进程它就可以好几个核，就一个核可以放一个线，可以放一个进程，
说话人1 19:17
原文：
是你继续说安全判决是一个函数，
说话人2 19:22
原文：
然后这个是。
说话人1 19:26
原文：
参数列表，对，不是杀的in for，是启动这个时候需要的一些参数，那不。
说话人2 19:32
原文：
就是参数列表，不是。
说话人1 19:33
原文：
参数列表，这个东西不是传给目标的限制。
说话人1 19:35
原文：
这个东西是拿来给什么的东西是拿来给系统用的系统看。
说话人2 19:43
原文：
系统如何创建一个新的进程，现场吗？傻了。
说话人3 19:47
原文：
改变了。
说话人2 19:48
原文：
让talking for。
说话人4 19:50
原文：
12给你多少钱多少给你多少钱参数，
说话人2 19:52
原文：
应该新的结构体了，进程的结构体，然后终止任务，比如说我们想终止任务，我们要如何终止它，我们好像的确知道终止任务，然后我们要开始了不就完了，但是这个终止任务是给我一个PID，我如果直接return只是把这个函数结束，它不是。
说话人5 20:13
原文：
可以换吗？你你处理到你把你的处理转到给把控制权交给 cos，然后把它给退了不就完了。
说话人2 20:25
原文：
但是你把控制权交给那个plus，那个plus正常进行，它的函数也是按照它的顺序进行执行的。
说话人2 20:33
原文：
他不知道要return，你怎么告诉他他要return。
说话人3 20:37
原文：
是。
说话人2 20:41
原文：
给每个进程额外加一个，比如说什么接收。
说话人5 20:45
原文：
系统可不可以执行还不执行，
说话人4 20:47
原文：
我觉得可以直接你你遇到首先先把控制权交给系统之后，系统直接把那个函数给。
说话人2 20:55
原文：
扔了不就行了，扔掉我想如果我只想暂停，
说话人3 20:59
原文：
暂停，
说话人2 21:01
原文：
那就是不调动，它就表示暂停，如果想把它终止了，那就直接删除掉，直接清除掉，直接。
说话人5 21:08
原文：
给它清除掉。
说话人3 21:12
原文：
是这样的，
说话人2 21:12
原文：
要是如果后期我们想增加，比如说用户想看历史上哪些进程哪些函数，
说话人5 21:19
原文：
你先把环节升起来，
说话人2 21:22
原文：
cpid获取当前PID这是在进程里面，
说话人3 21:28
原文：
不是。
说话人5 21:30
原文：
你现在问完了，到时候还得一个听。
说话人5 21:34
原文：
一个听录音。
说话人2 21:36
原文：
我现在理解了。
说话人5 21:38
原文：
不就好了，也对也有道理。
说话人2 21:41
原文：
不过我确实不。
说话人4 21:46
原文：
理解，就是整体的相当于我整体要写一个我一个大函，我每次进去之后我要有一个大函，因为他每天只能运行一个函，大函数里面然后往底下写，我对这个东西不是很了解，
说话人3 22:02
原文：
不对，
说话人4 22:06
原文：
密码对肯定是man，控制权只有一个man，因为你每次往里它运行的时候肯定只能运行一个man，对，但是运行man的时候，然后面底下这些函数在里面的。
说话人5 22:20
原文：
结构层次是什么样的？
说话人2 22:24
原文：
假如我是一个用户，我想编写一个读真诚的，对，然后我相信他命，然后我调用 Api一个是q然后一个是q的，比如我现在有个三个省，一是传输两个参数a和b然后return的是a加b然后三个 to是传输的是c和d上面是c乘d然后用户第一个是excuse，
说话人4 22:48
原文：
然后一个因素的方程一，
说话人2 22:50
原文：
方程一、方程一，然后ab然后还有一堆什么参数，然后再into execute。
说话人2 22:57
原文：
然后什么？当英特密进行执行的时候，当然我们也应该可能先要立画一个系统的结构体，
说话人5 23:06
原文：
另外一个系统结构体就是系统应该是个类，
说话人2 23:09
原文：
有可能我只如果让我。
说话人4 23:11
原文：
结果你走的，
说话人2 23:13
原文：
当然他可能不是这样，比如他阴比如说罗家宏阴他命的时候，c没有类，但c有结构体，对什么c没有类，c有结构体，但没关系，c可以用c加加的语法跟一般一样的，李老师你无敌了，不是你无敌了，我写代码的时候从来都是c跟 c加加混着写，我从来没有说你。
说话人1 23:32
原文：
来继续解答你的问题，先说我那个你先问谁问当然问。
说话人4 23:38
原文：
哪来着，
说话人2 23:38
原文：
就是说这个系统应该是不是说需要绿化的一个东西，需要什么绿化，什么13岁123481434134就是。
说话人1 23:52
原文：
变成一个事例，怎么讲？
说话人1 23:55
原文：
你具体。
说话人2 23:56
原文：
说说就是说用户首先例化一个系统，
说话人5 24:00
原文：
又不知道什么意思，你是干什么立。
说话人2 24:03
原文：
化，
说话人1 24:04
原文：
绿化把东西做成。
说话人2 24:06
原文：
啥意思？对，请问他在做什么，然后绿化系统就可以往里面不断的增加，某些函数。
说话人1 24:16
原文：
系统是随着随着你的上电启动之后就开始运行了，不需要你去创建一个这样的东西出来，你知道吧？
说话人5 24:23
原文：
不是你。
说话人1 24:25
原文：
系统的代码本来就是启动代码的一部分，就是。
说话人2 24:28
原文：
作为整个Linux启动的一部分，
说话人1 24:30
原文：
不是整个类似一个单面机上单面机的，你系统的程序直接就进入系统了，然后系统会启动一个0号进程，0号进来初始化其他的进程。
说话人2 24:41
原文：
 Linux伊利特的出系统初始化好像一样的，
说话人1 24:45
原文：
对类似的我们会有一个e net，懂了，e net任务结束之后可以使用一个，比如说我 sleep-1，直接把一直等对一直等就不再调了，先把它的优先级降成最低，然后sleep-1。
说话人1 25:02
原文：
或者直接sleep-1就行了，为什么吗？
说话人1 25:05
原文：
因为斯内普负一会让这个系统在无限秒之后才被第二次调度，那么每次调度时候看到系统就跳过它了，不需要把它优先级设置，它永远不可能被调度。
说话人3 25:14
原文：
好妙，
说话人2 25:17
原文：
刚好现在 int cpid是系统。
说话人1 25:21
原文：
cpid是系统，你不是有很多个单片机吗？叫做cheap，ID你懂吧？C的意思就是cheap，
说话人2 25:29
原文：
是不？Id获得的应该是不。
说话人1 25:34
原文：
cpid cpid是current process，Aidid当前过程对 cuid是当前系统的idu就是u就芯片的意思了，
说话人5 25:47
原文：
行。
说话人2 25:48
原文：
 Cpid是系统调。
说话人4 25:51
原文：
不是这些API不都是系统的API，
说话人2 25:55
原文：
不是比如说某些函数可以调用这些API，比如说某函数想知道自己现在是哪个进程，进程。
说话人1 26:01
原文：
号是什么，第一个方法是直接在PID传-1，就是直接指代当前进程，对，另外的话你取得当前一个进程号，然后传进去两种话都可以。
说话人2 26:13
原文：
 Cpid是系统吗？
说话人1 26:15
原文：
Cpid不是系统的，cpid是取得我进程的，是进程调用的，是进程用的，所有这些东西都是进程调用的。这不API肯定是进程调用的，不是系统调的，它是进程跟系统之间交互的接口的接口，
说话人3 26:31
原文：
他的。
说话人1 26:32
原文：
进程想要通过函数功能的时候，就靠这些函数来操作，对。
说话人4 26:36
原文：
我们来写这些函数，不就相当于我们要写系统，对。
说话人1 26:40
原文：
我写我怎么执行一个用户，对，现在跟你们讲个好消息，电路板快画好了。
说话人3 26:46
原文：
好。
说话人2 26:48
原文：
厉害好 excuse。它一个进它作为某个进程进程也能启动新的任务，
说话人4 26:57
原文：
他说我怎么执行一个用户的，我感觉相当于我调我用这个函数，然后用我在这个函数里面写，相当于就是我调了另外一个函数过来帮我干活，不是。
说话人1 27:10
原文：
你在函数里面调用这些的时候，你就进入了系统，这些函数是系统的一部分，要不他就跑到系统里。
说话人3 27:17
原文：
去了，有点。
说话人4 27:22
原文：
懵了。
说话人5 27:22
原文：
我用户要执行一个程序怎么弄？
说话人1 27:25
原文：
那个程序不是有一个 as一c然后把你的函数你要执行哪个函数，你要把这个函数传到p这个位置去，
说话人4 27:34
原文：
然后那就是他找了函数帮他干活，
说话人1 27:36
原文：
然后cost satin否是一个结构体，这个结构体里面选择进程怎么被调用，比如说启动的时候是要挂起还是不挂起，要初始优化的优先级是多少等等等等这些信息，然后pocimf是输出的结构体，这个输出结构体就是说如果你想立刻知道进程相关的信息，你就可以直接传一个空结构体，你要帮你把它填满。
说话人1 28:00
原文：
然后如果你进程启动之后，你还想得到信息的话，你可以这会不是psf，同样你还能用这个东西，因为这类这几个函数这个函数也一样的可以得到进程的信息，这个信息是实时更新的，只有每次vista这个函数的时候都会有吗？
说话人2 28:20
原文：
你那麻烦你再写一个具体这些结构体里面都包含啥吧？
说话人1 28:27
原文：
具体结构体包含什么可以慢慢改，这个没问题，反正你每次编一下都可以是。
说话人3 28:32
原文：
吧？谁知。
说话人4 28:35
原文：
调度到PAD，
说话人2 28:36
原文：
不是调度到PAD也能进程来调度吗？
说话人2 28:41
原文：
 Swtc是调度到PID所以这个应该是系统调用。
说话人4 28:47
原文：
的，我转到价格专家，他不之前讲了讲了非常地狱的笑话，
说话人3 28:52
原文：
可以看这。
说话人1 28:54
原文：
句话叫怎么讲，叫做贸易战也是换个标签的事情，山东德州生产的可以写made in case，对。
说话人1 29:04
原文：
然后你看我说了一句，我说没事，贸易战不影响科大，用德拉萨州大学的试卷来考it。
说话人3 29:12
原文：
6666624.
说话人4 29:15
原文：
s.
说话人2 29:17
原文：
这个swtc也是调度到PID，不应该是系统进行调度吗？
说话人4 29:24
原文：
镜头本来就是系统，这本来就是系统里面，我用我这个用户，我现在我现在要转到另外一个做事情，那就是我思维指导另外一个ID另外一个，但是。
说话人2 29:38
原文：
比如说用户只想让我刚说三个1和三个two运行，他并不想说谁调度到谁，他只要知道最后结两个结果同时出来了就好。
说话人1 29:49
原文：
那是你。
说话人4 29:51
原文：
用过了他给你你就不用这个函数，
说话人2 29:53
原文：
我们系统是要调度的，
说话人3 29:55
原文：
我们。
说话人2 29:56
原文：
系统需要先进行一半的三个选a然后再转化到三个孕吐，然后再转到三克镇万，完成三克镇万之后再转到三克镇去完成8克镇。
说话人5 30:06
原文：
你可以斯利普吗？斯瑞斯斯利普斯瑞斯斯里普一直等他的结束。
说话人2 30:13
原文：
是，但是我想知道 swtch到底是系统在用什么，还是。
说话人1 30:19
原文：
所有东西都是用户统一叫什么？
说话人4 30:21
原文：
我感觉他的意思就是说用户用 Switch有啥。
说话人1 30:26
原文：
把当前的主动让出去给另外一个过程，
说话人4 30:30
原文：
他为啥要这么干？
说话人1 30:31
原文：
就有的时候你有些特殊的调动需求，比如说你你这些全部正常发送了一个信息，叫他去处理一件事情，你想立刻让他。
说话人4 30:40
原文：
开始立刻那就过去就好。
说话人2 30:42
原文：
这个全部都是细这个用户手册相当于用户的redmi，
说话人1 30:47
原文：
对是给用户用的。
说话人4 30:49
原文：
我们要写这些，
说话人1 30:50
原文：
我们要实现它背后的那些逻辑就行了，剩下事情不用我们做，现在是用户的事，
说话人2 30:56
原文：
我们首先把这些逻辑写好之后，但是我们还要系统来看这些API就编译我们在系统上看，比如说现在用户想思维持的话，用户调用思维值，然后我们还要写系统端该怎么怎么，那。
说话人1 31:11
原文：
对我们不需要写用户程序，我们写的就是系统的，
说话人5 31:14
原文：
现在是什么？现在是类似音乐的函数，现在这里边有吗？
说话人2 31:20
原文：
0号0号0号程序他应该还没写0号，程序应该是直接通过什么编写的吗？
说话人5 31:28
原文：
0号是不是现在还没写，这是用户的。
说话人4 31:31
原文：
0号程序，现在是不是还没写什么？0号程序盈利的干嘛了？在这里边是不是还没体现盈利，它又不是API，对您这不是API。
说话人1 31:42
原文：
 It is就是一个函数，
说话人2 31:44
原文：
我们现在不知道盈利的情况下也能写完这一篇吗？
说话人1 31:46
原文：
可以， It函数里面就是创建别的也是写用户需要创建几个技能就写几个进程，
说话人1 31:55
原文：
 a那个是干什么的？A作用是初始化这个系统，初始化所有的用户进程，比如说你认为这个系统开始的时候，应该有一个进程是驱动电机的，有驱动显示器的，你有几个函数就写几个a面条，就是写几个exec的调用，写完之后就为了-1，那斯内普-1就搞定了。
说话人1 32:16
原文：
那次就是告诉我们初期的时候要创建几个进程，你不然你不创建那些系统哪来的进程，自己还得再创建新的进程，这是没问题的。
说话人3 32:24
原文：
谁知。
说话人2 32:28
原文：
用户比如说用户写了ink me，然后就需要一个q还是说是用户写了inter interment之后，他就需要。
说话人1 32:39
原文：
excuse，他先定一个不对不叫inter interment就叫inter这个函数，unit函数就叫unit，然后unit，函数里面就是做什么事情呢？其中几个进场然后结束，就卡在这地方就行了。
说话人1 32:56
原文：
A类的函数就是系统的第一个进程就。
说话人3 32:59
原文：
0.
说话人1 33:00
原文：
PID为0的进程，是不是跟Linux很像看起来。
说话人2 33:06
原文：
明白，我连都不太懂，然后用户写了个阴历的函数之后，对，
说话人1 33:10
原文：
然后就要写他自己的那些东西，然后既可以。
说话人2 33:14
原文：
写线程，也可以就可以写进程，也可以写。
说话人1 33:20
原文：
 n类的函数里面一般不做具体的处理，具体的处理。
说话人2 33:23
原文：
就是说我想让比如说我有个函数一函数21直到函数10，然后因为我想这些东西并行，那只需要用exe对吧？
说话人3 33:34
原文：
对，
说话人2 33:36
原文：
然后比如说这10个并行完之后，我再等待他们进行完之后再进行下面的另外。
说话人1 33:43
原文：
70个不是他不会进行完进程一旦启动之后只会自己挂掉，就是退掉，退掉之后就没有人来启动新的进程了，你懂吗？
说话人2 33:52
原文：
不是，现在假如用户想先启动10个镜头，等这10个进程都跑完，跑完之后再进行下面20个。
说话人1 33:59
原文：
进程的并行，可以用信号量不是有c弄吗？
说话人1 34:02
原文：
新建材结束之前把一个c弄之前的衣服就行了，
说话人2 34:07
原文：
剩下进程得到信号之后，
说话人1 34:12
原文：
对甚至我可以给每一个进程在启动的时候，每个进程在起来的时候，都自动给它分配一个系统，这个系统的功能能够在运行结束的时候把它制成，然后你只要一堆wait就行了，你知道吗？
说话人1 34:24
原文：
对，要加 wait要加多一个，同时等待多个信号，其中一个触发就直接触发这样一个函数。
说话人2 34:32
原文：
那不就是或和与的。
说话人1 34:34
原文：
区别，对，现在如果你写了一堆的话，那就是与的关系，但是我们想要还要一个获得，现在加一个就是一个传入一堆，
说话人2 34:43
原文：
其实也不用，他如果需要等个信号的话，他直接把这个信号写成自己想要的不就好。
说话人1 34:49
原文：
但你有可能有多个进程，每个进程都有一个signal，你想让他们在任何一个退出的时候都触发这个事情都继续执行，
说话人2 34:56
原文：
只要他wait的时候写这个 c个no等于因为你c个no是int，我可以直接写成c个no谁或谁，然后再或谁。
说话人1 35:05
原文：
怎么能或呢？
说话人2 35:06
原文：
或者。
说话人1 35:07
原文：
与什么东西，那不是为运算。
说话人1 35:11
原文：
C这样CD这个数字从0开始一直增大的一个数字，每个c每个数字对应的是一个信号，
说话人2 35:20
原文：
然后一个系统一个进程在执行的时候会有。
说话人1 35:24
原文：
在不同阶段让这些进程之间能够互相。
说话人3 35:27
原文：
同步。答案是交换交换的，
说话人2 35:30
原文：
比如说他现在一个是q10，然后想让等这10个函数进行完之后再进行下面的。对，假如我先说你先等我描述，假如用户。
说话人1 35:41
原文：
想10个函数，10个函数执行完之后再执行，剩下不是。
说话人2 35:44
原文：
说我先说现在有用户有30个函数，然后想让前10个进程同时进行完之后，然后他们全部进行完，才进行下面的20个函数，用户写的形式应该是先写完这10个函数，然后先1个q然后直接下面写这20个函数，中间加什么，比如说点wait或者说点什么的，或者点胶印之类的就可以了，它还是说我们的系统直接是把这30个进程全部创建了，只不过后20个进程的启动是需要等待信号的，
说话人1 36:20
原文：
没有启动不能等待信号，一旦启动出来就直接开始运行，除非你传的是span的标志进去，你传的是span的标志，它就启动的时候就是这个镜头是暂停的状态，就不调度的状态，
说话人2 36:32
原文：
也就是说用户的30个进程其实在一开始都初始化，
说话人1 36:36
原文：
不是你先初始化10个再初始化10个，
说话人1 36:40
原文：
10个再去做20个说错。
说话人4 36:42
原文：
了，不是你盈利它的时候不应该把这30个都可以，
说话人1 36:44
原文：
不是二的话盈利它里面可以先初始化10个，然后等待10个结束再做，因为这就是1个普通的函数，那。
说话人2 36:50
原文：
就是我我之前说的相当于其他库的点照应的方法。
说话人1 36:55
原文：
对再装一个，但我意思是除了装一装，还有一种还要设计一个函数，这个函数能够在那一堆里面任何一个被触发时候就触发。
说话人2 37:03
原文：
那就是在其他进程点Excel的时候，再就是其他进程接触到某信号的时候，再exq。
说话人1 37:11
原文：
不是应该是接受，不是应该是接进程没有接受信号这个概念，它只能等待信号是阻塞式的，
说话人3 37:21
原文：
你那个。
说话人2 37:23
原文：
阻塞的信号是发给进程，对。
说话人1 37:26
原文：
不是信号发给人，是进程主动去等待，然后等它发现它变成一了就往下走。
说话人3 37:32
原文：
好吗？你先。
说话人4 37:37
原文：
理解。
说话人5 37:38
原文：
一下想一下。
说话人3 37:39
原文：
加强的市场的重要。
说话人2 37:42
原文：
进程是可以进程如何调动这些信号不是。
说话人1 37:48
原文：
有个含API吗？不是有一个叫做c no site吗？这个 sigset你就可以把一个东西变成一，后面的s就是传一就行了，就触发这个信号。
说话人5 38:02
原文：
设置s等于或。
说话人5 38:11
原文：
你不应该是引用吗？起止s对应该。
说话人2 38:15
原文：
不然没法修改。
说话人5 38:17
原文：
应该是地址对，你不应该起止或者是传船之间感觉或者引用。
说话人2 38:25
原文：
a进程，把某个信号改成一之后，b进程就可以直接发现它变成一了就开始进行。
说话人5 38:32
原文：
你对我觉得我就想b。
说话人3 38:35
原文：
一直。
说话人5 38:36
原文：
为他监控。
说话人3 38:38
原文：
信号，
说话人4 38:39
原文：
不像别人一天网点跑，
说话人1 00:00
原文：
创建一个信号，信号的触发条件就是进程结束，直接把它触发成那行了。直接 C能然后找他们并会找他们那什么，你就 a那次里面做事情就是创建10个镜头，然后为他是正常一的这个为他经常化的事情，谁知的只有当这10个同时处理的都触发处于1个状态之后，这些位置才能一起丢掉，一起通过它就挡在那里，只要有一个没成不就挡在那吗？
说话人1 00:34
原文：
然后在exq的时候下面继续创建剩下的20个镜头，一般来说不会一次性把30个都创建好的，也不是不可以，你如果创建先创建10个再创建20个，但后面20个创建的时候，设置成一开始运行有问题，其实一开始运行时候不执行代码，然后等前面10个站结束了之后，我再把它恢复它的运行就可以，也是可以。
说话人2 01:00
原文：
的，那就是一个赛特传的应该是指针，还是说传的就是这个意思。
说话人2 01:07
原文：
 Six set如果修改信号的话，是不是应该传指针？
说话人1 01:11
原文：
 Cctv为什么传指针？这个是一个数，是在系统的列表里面，我们一般来说不建议直接传一个系统内部的对象的指针，因为这样可能会导致用户错误的破坏了系统的状态，你一般来说我们都是系统里面有一个表，这个表里面第一项是一个数字，第二项是一个具体的结构体，我们传的是那个数字系统会自动在这个表里面找到那一项，
说话人3 01:39
原文：
传的是数字，然后数字去修改，对。
说话人1 01:42
原文：
根据这个数字来修改，我们不会直接给表上的指针，不然就很容易破坏掉有。
说话人3 01:47
原文：
一个什么是吧？
说话人2 01:48
原文：
相当于他们传的就是指针。
说话人2 01:50
原文：
不是指针，传的是一个找东西找的东西，那不就相当于是传那个东西的指针。我知道不是指针，就是说类似一个像指针一样的东西，不能。
说话人1 02:03
原文：
直接给一个。
说话人2 02:05
原文：
传了一个类似一样指针一样的东西，用户可以通过来修改结构体的东西。
说话人3 02:11
原文：
修改结构体的今天不是刚讲吗？对今天不是刚讲。
说话人1 02:16
原文：
上课讲的吗？
说话人3 02:18
原文：
那个是我讲的。
说话人1 02:19
原文：
总之我们不希望不创新，我们不希望我是说我们不希望用户直接去操作一个系统，内部的对象，因为这样可能会破坏，如果用户指针它不一定你知道你只要有地址了，你干什么，其实没人管得着你，对吧？你说不定就往里面写入了，就破坏了系统内部的状态。
说话人1 02:40
原文：
系统想恢复系统就完全靠它自己的一个状态来记忆这些线程是什么一个状态，你把它破坏掉了，这些线程不就完了吗？没人去管它了，
说话人1 03:22
原文：
所以大概这个事情你懂了，就是我们大学把v一这一版的API它已经。
说话人2 03:28
原文：
其实但是v11版API好像我还不是不会想，比如说你刚刚说什么系统修改列表，我们。
说话人1 03:35
原文：
的系统内部有个数组吗？
说话人4 03:37
原文：
没事儿，你给我们实现一个事例的。
说话人3 03:39
原文：
事例表，然后我们就拿了一个，然后我们其他的就会写了，
说话人1 03:44
原文：
直接把晋城的全写完了，真是的。
说话人2 03:47
原文：
不是你写一个，我们现在我。
说话人1 03:48
原文：
写了一个，其实剩下基本都写完了，
说话人2 03:51
原文：
当然就是一些琐碎工作不需要你做，我们自己来做，然后我们俩先写。
说话人1 03:56
原文：
一个，然后我叫你是一人负责一个子系统，比如说我负责进程，有一个人负责内存可以也行，但是我们还是不知道怎么写，需要你举个例子对头，还需要你举个例子。
说话人2 04:07
原文：
我知道了。
说话人1 04:10
原文：
你怎么它就是一个函数正常。
说话人3 04:13
原文：
写就完了，你只要能实现就行了。
说话人2 04:15
原文：
这个数组你说刚刚什么是系统的一个数组？是系统一个列表，但我们不知道该怎么调用，它。
说话人1 04:22
原文：
就是一个全局变量，你怎么调用，那它名字是什么？
说话人5 04:25
原文：
你自己定你是写这个东西的人，你自己来定，你爱叫啥叫啥，有什么问题吗？
说话人6 04:31
原文：
他。
说话人1 04:33
原文：
就是个全局变量，有什么问题。
说话人3 04:35
原文：
我觉得你自己写啥就。
说话人5 04:38
原文：
它不是一个全局列表吗？是它就一个名字，你。
说话人6 04:42
原文：
也就是说连这个列表都是我们。
说话人5 04:44
原文：
自己写，肯定你整个系统从头到尾都是你自己写出来的，没有任何的东西在底下对吧？
说话人6 04:51
原文：
好像懂一点点，就是。
说话人5 04:53
原文：
所有的东西都是你自己，
说话人4 04:55
原文：
比如说你要改变一个列表项，那不就是拿那个程序变量，你二重二维数组你还不会改呢，
说话人6 05:02
原文：
志刚不明白怎么。
说话人5 05:04
原文：
写，后面怎么写改，直接就操作结构体那样子改，我问你怎么改，
说话人6 05:09
原文：
很重要的，写就懂。
说话人5 05:12
原文：
就你有一个全局变量比叫做p list，
说话人6 05:14
原文：
我知道p。
说话人1 05:16
原文：
 list里面。
说话人5 05:18
原文：
 t list的第一位是一个数字，不叫第一位是个数字，就是它的下标是一个数字，下标就是PID，然后它的数组的内容就是一堆，一堆就是。
说话人6 05:28
原文：
我们自己定义的，想自己定义自己，
说话人5 05:30
原文：
爱怎么定义怎么定义行，好。
说话人5 05:33
原文：
然后每一个进程下面，比如说我进程当前的上下文，进程的执行，时间的一些统计，信息进程是否处于等待状态一些标志，然后你每每调一次那个函数的时候，它就会把这里面东西改一改，比如说你假设你有一个wait，那么这不是就这个sleep，我举个例子， Sleep就是传了1000，那么它会做什么事情？
说话人5 05:54
原文：
就系统先取一下当前的绝对时间戳是多少，比如绝对时间戳是200，假设系统当时已经启动了200毫秒了，然后他不是要喂的1000，好他喂了1000之后，你就在这个里面有一个项目叫做唤醒时间，唤醒时间就是一两百加1000，告诉系统说进程期待自己在1200毫秒的时候被唤醒，那么系统里面就会有一个定时器，不是每毫秒执行一次吗？每毫秒执行一次的过程它就会检查一遍这个表，看里面哪个进程需要被唤醒，如果把它的优先级也符合，那么就switch到他那里去。
说话人5 06:28
原文：
那么这个进程感觉就是自己在1200毫秒时候被唤醒了，没到时间，即使优先级达到，我们也不唤醒它，这不就是一个sleep的实现吗？就这么简单，就这样。
说话人6 06:47
原文：
好。
说话人5 06:49
原文：
好像我觉得挺好的，我说我将来转的话也不用在意这个问题。这是一个很直白很简单的东西吗？我问了。
说话人6 06:59
原文：
好像只有你一个人理解，我们仨都没理解，我觉得可能你讲述方式有些问题，
说话人5 07:05
原文：
我再讲一遍。
说话人6 07:06
原文：
也不是你再讲一遍的问题，是你根本不懂我们到底哪没懂，然后我们也不懂你想说的到底是什么，
说话人5 07:13
原文：
就是系统为每一个进程都维护了一个结构体，
说话人6 07:16
原文：
我这些一些概念性的东西我们都知道，我们只是不明白具体的方法上该怎么，就具体函数上该怎么写。
说话人6 07:23
原文：
所以我让我。
说话人5 07:24
原文：
的意思是它作为一个。
说话人6 07:26
原文：
就是我们所有结构性的东西我们都理解了，我们现在唯一不理解的，
说话人5 07:31
原文：
我举个例子，实例函数怎么写？
说话人6 07:35
原文：
应该有个计时器，
说话人5 07:37
原文：
不是实例函数，不是用计时器实现的，实例函数里面只有一句话，就是把当前进程的预期唤醒的时间内项把它设置成某个时间，那么系统以后到了这个时间的时候，看到进程需要被唤醒还是把它唤醒，就这么简单，这个。
说话人6 07:54
原文：
系统部分是谁写？
说话人6 07:55
原文：
什么系统部分的API还没有写是吗？
说话人5 07:58
原文：
不是API。
说话人6 08:00
原文：
方系统，比如说我现在把它设置成1200秒把它唤醒，对，然后我只需要告诉系统1200秒把它唤醒，
说话人5 08:07
原文：
不是告诉你们这已经是系统内部的事情，我们就是系统本身，他告诉我要举个例子我是一个进程，假设你是系统我是进程，你告诉我或者你是进程我是系统，你告诉我，比如说你现在告诉我我需要在1200不，你需要在200秒之后被唤醒，我系统来看看，掐个表看一下，现在是1000秒了，这。
说话人6 08:27
原文：
掐表的过程怎么掐？
说话人5 08:28
原文：
系统里面不是每毫秒有个定时器吗？它有个全局变量，每毫秒加1就这么简单，
说话人6 08:32
原文：
你每毫秒加一是谁写的？是怎么做的？
说话人5 08:35
原文：
一个中断函数有一个全局变量叫做time，每毫秒把time加加就这么简单，ok。
说话人6 08:42
原文：
你继续，
说话人5 08:42
原文：
然后你告诉我需要在1000毫，就举个例子，你现在是1000毫秒，你现在告诉我在200毫秒，
说话人6 08:48
原文：
然后系统达到计时器的话。
说话人5 08:50
原文：
不是达到计时器，每个进程不是有个结构体，结构体里面有一项就是进程应该在什么时候被唤醒，那么你现在告诉我你在200毫秒会唤醒，你是相对的对不对？
说话人5 09:02
原文：
我现在掐表一看现在是1000毫秒，所以我把两个加在一起把它写进去，这项里面记录的数字1200，然后系统不就继续执行别的东西去了吗？
说话人5 09:10
原文：
它每毫秒都会减检查一遍所有进程的列表，然后突然间到了1200毫秒的时候，突然检查到一个进程，发现它应该在这个时候被唤醒了，然后再一检查发现更高级别的就是优先级比它高的进程没有人在运行，我当然可以把它给它了，我就调度到它身上去了，进程在你看来就是你调了1200毫秒的东西之后，系统把你控制权夺走了，所以你就是安静的在那里等着，然后1200毫秒之后，我突然间把控制权交回给你，你就感觉自己又运行了，这中间就有一个200毫秒的时间，这200方面系统可能在做别的事情，比如调度别的县城去了，懂吧？
说话人5 09:46
原文：
就这么写那个函数就一句话好吧，就两句话，一句话是把当前进程的预期唤醒时间改掉。
说话人5 09:52
原文：
第二句话要的yeld要的意思就是说随便把控制权交给别人，反正就是跟击鼓传花一样，就是把丢给别人就行了，我不管丢给谁系统，由系统优先级机制决定是谁。
说话人6 10:07
原文：
的，
说话人5 10:09
原文：
要的就是把当前的目前让出去让给谁，由优先级算法决定。
说话人5 10:15
原文：
优先级算法告诉你下一个被让给的应该是谁，
说话人6 10:18
原文：
我们今天写的写这个。
说话人3 10:20
原文：
东西还没写，也不在这里边了。
说话人5 10:23
原文：
不是要的有。
说话人3 10:25
原文：
我说是每一毫秒看一次有没有竞争需要被唤醒，那个东西还在这里，这不是API，
说话人6 10:34
原文：
那个东西还没有写，我们现在的确还无法调用它，我们只能说你。
说话人5 10:39
原文：
可以虚空调用你懂吧？就假设有这样的函数，你写个函数原型在那就行了，
说话人4 10:43
原文：
代码。
说话人5 10:44
原文：
是可以正常写的，你懂吗？我甚至可以我甚至可以干一些比较离谱的事情，我拿电脑上的gcc来编译文章，然后用一个系在windows上设个定时器，一毫秒变速器，那么就假装我是个定时器，你懂不懂？这也是可以的，就你测试的时候不一定要在真的板上测试，你可以在windows上就能测试，假装我是定时器，我每秒每毫秒就调用一次。
说话人5 11:08
原文：
就懂了吧，内部函数就是这么实现的，很简单的。
说话人6 11:12
原文：
懂了，但是你要不说的话，我们可能就会以为斯内普函数让我们自己写个定时器来进行加压这种，
说话人5 11:18
原文：
你假如如果每个进程都有一个定时器的话，你定时器很快就用完了，
说话人6 11:23
原文：
要爆掉了，或许说系统有个时间出来，我们每次只需要从系统上。
说话人4 11:27
原文：
访问系统时间出来，对你。
说话人5 11:29
原文：
是每一次每个进程肯定是你如果你是很自私的进程，你当然可以说我在里面有个while一循环while一，然后然后每次读一下系统实验之后，看看有没有到了，我就继续往下走，当然可以这么干，但是问题是这个方法为什么不好，在于它一直在消耗CPU时间，
说话人6 11:44
原文：
把所有可以系统做让系统做的就是。
说话人5 11:48
原文：
这个时间他就一直等着在原地循环，别的系统怎么执行，我问你执行不了对不对？这不是。
说话人6 11:56
原文：
应该把它中断掉，然后中断，请问什么时候唤醒它呢？
说话人5 11:59
原文：
那不就系统里面要记一下它什么时候唤醒吗？懂了吧？所以斯内普不应该是那样实现的，原因就在这里。
说话人5 12:06
原文：
就这个时间本来可以明明可以做更多的事情，但你却在这个无限循环去等那个时间出来，那是不好的。
说话人5 12:15
原文：
好一毫秒的一个定时器，然后系统就是每隔一毫秒都会去VC一遍这个列表，每每一毫秒他做的第一件事情就是打断当前的执行，因为它是个中断是吧？肯定打断当前的执行了。
说话人5 12:29
原文：
接下来这个表里面走一圈，看看优先级比它高的进程有没有处于饥饿状态，就是有没有进程需要调度，但目前还没有调度，先看又从优先级高到低，看高优先级的有没有？
说话人5 12:40
原文：
中优先级没有，低优先级没有再按顺序走一遍，同一个优先级内有没有进程急需被唤醒，比如说它有io任务在等着，它有各种这个算法就是我们自己来实现的，后面随着系统功能会越来越多，比如说进程两一个进程有200个字节的数据包在等着它要处理，另一个进程没有肯定优先调度给200的，然后优先级处理完之后，有没有进程处于等待的状态，并且需要被调度，比如说刚才说的时间错已经到了，就你1200毫秒已经到了，那我就一看有我就马上调度给他，如果都没有什么东西都没有之后，从头到尾什么东西都没有之后，你知道调度给谁吗？
说话人5 13:17
原文：
调度给0号进程，0号进程优先级最低的进程，如果什么都没有就调度给他，他在干什么？他在实力不-1他永不唤醒，所以系统在什么都没做，又就是空等了一毫秒空等一毫秒，然后又从头开始，或者是如果比如说当前的进程，你走了一圈之后发现没有比当前进程更适合在现在运行的，它就把控制权又交还给进程了。
说话人5 13:46
原文：
这个镜头就是感觉自己被短暂的打断了一下，然后又重新还有一个函数叫real time，就可以把这个系统置于实时模式下。当一个进程需要，比如说给某个传感器发送信息，它有很严格的时序的时候，你自然不希望一毫秒的时间把它打断，对不对？不然时序就不对了。怎么办？我们有一个real time，函数把系统状态置于it之后，系统就关闭一毫秒的中断，
说话人4 14:12
原文：
然后等再加一下。
说话人5 14:15
原文：
就不关闭一毫秒中断，并且至于实质上接下来你的事情就不会被打扰了。
说话人5 14:20
原文：
同时它会把一毫秒它不是关闭的中断，而是把中断调成一个更长的时间，时间是什么？就是你传入的时间，也就是说如果你比如传入500毫秒，在500毫秒内，如果你还没有恢复到正常运行状态，那系统就会干预这件事情了，他就把定时器调用系统函数发现你是被干预了，那么就把你控制权让渡出来，给另外一个线程，同时把它恢复到正常运行状态，就避免一些real time的任务出现异常，比如中间代码写的有问题，它一直卡死在那不动了，你不能让别的人都不运行对不对？
说话人5 14:50
原文：
那么我们会给一个预期的执行时间，500毫秒内如果都没结束，我就要暂停现场了，可能你现场有问题我就要暂停，不能影响别人运行，对不对？这是调度的机制，这不是os课上应该讲的东西吗？
说话人6 15:06
原文：
我也没说不会就是说你一个人讲而已，
说话人5 15:09
原文：
我意思说这个东西我觉得讲起来容易理解，是因为这个是os。
说话人6 15:13
原文：
是的，但我们也没有说不会，我们不明白的点只是在于很具体的操作上。
说话人5 15:22
原文：
很具体的操作，没办法，因为但是。
说话人6 15:24
原文：
现在理解了，原来要从0开始写，
说话人4 15:27
原文：
你们到现在才发现从0开始写，
说话人6 15:30
原文：
是因为你直接把API规定好了，我们觉得什么东西都要按你规定的，比如说什么哪个地方该有什么了，然后比如说哪个地方该调什么函数，但是现在发现了这个函数也是我们自己写的，
说话人5 15:44
原文：
API是我想先提前规定一下，这样可以使前后的设计任务可以分开来做。
说话人5 15:49
原文：
只要API固定，那么双方就合作得很好，现在我是这样子想的就是说负责人一个人负责写一个子系统，
说话人6 15:57
原文：
可以，你。
说话人5 15:58
原文：
比如说假设我。
说话人6 15:59
原文：
觉得工作量好像也不大，我。
说话人5 16:01
原文：
肯定是工作量最大的，我写进程的一个子系统，
说话人6 16:04
原文：
然后有一个人进程子系统是哪个。
说话人5 16:06
原文：
进程子系统，就是所有的调度切换、进程创建、销毁，然后进程同步子系统可以由另外一个人来写，比如给他关系人写，假设，然后比如说问他你可以来写通信， Com开头的那一堆函数给你来写，
说话人6 16:22
原文：
包括API之类的，
说话人4 16:24
原文：
就像你最后暴露给用户。
说话人5 16:27
原文：
的东西就是API是的，然后比如说催熟可以写那个叫什么来着，我想一下4个子系统，还有自由车轴可以写io，就是其他的输入输出外设。
说话人5 16:38
原文：
行，我举个例子假设这么分了，我没有说确定这么分，因为API我还在构思的应该快好了，大概应该明天就好了， v一的API API一旦规定好之后，每个人就领取几个API来写就行，当然我们肯定会有一些共同的工作，比如说假设关键人写的是信号那部分，信号的部分肯定跟进程会有一些关系，那么我们会共用一些结构体懂吧？
说话人5 17:03
原文：
每一个人的子系统就在一个文件夹上，Linux那样组织，比如说 p比如说 Elsie可能是进程的系统，那么我来做，然后他可能比如说signal他叫signal的文件夹上写，然后我们可能共用一些结构体，比如说就共用的，比如说我们要上一个叫common文件夹里面，整个系统共用的那些数据结构体，全局变量全部写在一个地方。
说话人5 17:26
原文：
好就这样子，就是避免改，因为我们改一个地方可能会影响别人写的东西，所以的话就说所以我们尽量通过有一个叫com的地方把这些东西都小，然后所有的函数的原型，我们要com里面有一个叫做比如说假设我们觉得我们不是叫做y的滑梯吗？
说话人5 17:45
原文：
我们这个东西的名字不是要拉一条rt上次不是在给的什么建了一个仓库，比如说我们可以有一个头文件叫卖的art e点h小s的h一样，里面就会有你定义的所有的系统API的原函数原型在里面，那么用户就引入一下函，这个头文件它就可以这样点一下了。
说话人5 18:07
原文：
作为一个用户来说，我拿到这个系统做的事情就是把我自己的源代码写好，领q的那一条IP的h然后电网里面API，然后把我写的这些文件跟系统文件放在一起编译，那么它链接的时候就把它链接成一个整体，刷单就这样就可以了，大概是这个意思。
说话人5 18:26
原文：
板子快画好了马上就有了，好的囤芯片也囤好了，
说话人4 18:34
